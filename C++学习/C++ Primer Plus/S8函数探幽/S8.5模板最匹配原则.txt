#include<iostream> 
template<typename T>
void ShowArray(T arr[], int n);

template<typename T>
void ShowArray(T *arr[], int n);

template<typename T>
T SumArray(T arr[], int n);

template<typename T>
T SumArray(T *arr[], int n);

using namespace std;
struct debts
{
	char name[50];
	double amount;
};

int main()
{
	int things[6] = { 13,31,103,301,310,130 };
	struct debts mr_E[3] =
	{
		{"Ima Wolfe",2400.0},
		{"Ura Foxe",1300.0},
		{"Iby Stout",1800.0},
	};
	double *pd[3];

	for (int i = 0; i < 3; i++)
	{
		pd[i] = &mr_E[i].amount;
	}
	ShowArray(things, 6);
	cout << "Listing Mr.e's deebts:\n";
	ShowArray(pd, 3);
	cout << "The sum of things:" << SumArray(things, 6) << endl;
	cout << "The sum of pd:" << SumArray(pd, 3) << endl;
	return 0;
}

template<typename T>
void ShowArray(T arr[], int n)
{
	cout << "template A\n";
	for (int i = 0; i < n; i++)
		cout << arr[i] << " ";
	cout << endl;
}

template<typename T>
void ShowArray(T *arr[], int n)
{
	cout << "template B\n";
	for (int i = 0; i < n; i++)
		cout << *arr[i] << " ";
	cout << endl;
}
template<typename T>
T SumArray(T arr[], int n)
{
	T sum = 0;
	for (int i = 0; i < n; i++)
		sum += arr[i];
	return sum;
}
template<typename T>
T SumArray(T *arr[], int n)
{
	T sum = 0;
	for (int i = 0; i < n; i++)
		sum += *arr[i];
	return sum;
}
/*最匹配原则
“当是double *数组代入时，进的是模板A而不是模板B”
其中：
	double *pd[3];
	for (int i = 0; i < 3; i++)
	{
		pd[i] = &mr_E[i].amount;
	}
也等同于
	double pd[3];
	for (int i = 0; i < 3; i++)
	{
		pd[i] = mr_E[i].amount;
	}
一个是指针传递一个是值传递；
*/