1.Brass *p_clients[CLIENTS];
BrassPlus是Brass的子类，所以Brass声明的数组既能存储Brass又能存储他的子类；

2.可以对Brass对象执行的任何操作，都适用于BrassPlus对象；
3.按引用和指针发生的隐式向上转换，而按值不会。
4.静态编联效率更高；
虚函数的成本：
*每个对象都将增大，增大量为存储地的空间；
*对于每个类，编译器都要创建一个虚函数地址表
*对于每个函数的调用，都需要执行一项额外的操作（即到表中查找地址）
5.如果要在派生类中重新定义基类的方法，则将它设置为虚函数；否则，设置为非虚函数；

6.定义类使，需要注意：
a）构造函数
b）析构函数
即使基类不需要析构函数，但是也要提供一个虚析构函数
c）转换
要将类对象转换为其他类型，需定义转换函数：
star::operator double () {...}
star::operator const char *() {...}
d）按值传递对象与传递引用
按引用传递更好，效率高；
按值传递会调用复制构造函数，再调用析构函数；
e）返回对象和返回引用
Star nova1(const star &);
Star & nova2(const star &);
返回引用可节省时间和内存；
返回对象效率低，但是引用返回不了临时对象的引用，这时候要用返回对象：
Vector Vector::operator+(const Vector &b)const
{
	return Vector(x+b.x,y+b.y);  //有临时对象，只能返回对象
}
如果函数返回的是通过引用或指针传递的对象，则应按引用返回对象：
const Stock & Stock::topval(const Stock & s)const
{
	if(s.total_val>this.total_val)
		return s;
	else
		return *this;
}

f）.const使用
确保方法不修改参数：
Star::Star(const char *s){...}
确保方法不修改调用它的对象
void Star::show() const{...} ;//在调用st.show()时候确保st不被修改； 

7.赋值运算符
如果派生类使用了new，则必须给类的每个成员提供显示赋值运算符：
hasDMA &hasDMA::operator=(const hasDMA &hs)
{
	if(this==&hs)
		return *this;
	baseDMA::operator=(hs);
	delete[]style;
	style=new char[std::strlen(hs.style)+1];
	std::strcpy(style,hs.style);
	return *this;
}
8.友元函数
友元函数并非类成员，因此不能继承。然而，想要派生类的友元函数能够使用基类的友元函数，
可以通过强制类型转换：
ostream &operator<<(ostreama &os,const hasDMA &hs)
{
	os<<(const baseDMA &)hs; //强制转换成基类类型
	os<<"Style: 	"<<hs.style<<endl;
	return os;	
}