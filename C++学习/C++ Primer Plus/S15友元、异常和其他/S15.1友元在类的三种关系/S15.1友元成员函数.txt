友元：决定谁是它的友元，才能影响类中的私有成员：
class Tv
{
	friend class Remote;
	..
};
Remote的所有方法都可影响tv的私有成员；

Claass Tv
{
	friend void Remote::set_chan(Tv &t,int c);
	...
};
只有Remote::set_chan()能够影响tv的私有成员
并且需要提前声明！

#ifndef TVEM_H_
#define TVEM_H_
class Tv; //forward declaration

class Remote
{
public:
	enum State{ Off, On };
	enum { MinVal, MaxVal = 20 };
	enum { Antenna, Cable };
	enum { TV, DVD };
private:
	int mode;
public:
	Remote(int m = Tv::TV) :mode(m) {};
	bool volup(Tv &t); //仅声明原型
	bool voldown(Tv &t);
	void onoff(Tv &t) ;
	void chanup(Tv &t) ;
	void chandown(Tv &t) ;
	void set_mode(Tv &t) ;
	void set_chan(Tv &t, int c) ;
	void set_input(Tv &t) ;
};
class Tv
{
public:
	friend void Remote::set_chan(Tv &t, int c);
	enum { Off, On };
	enum { MinVal, MaxVal = 20 };
	enum { Antenna, Cable };
	enum { TV, DVD };

	Tv(int s = Off, int mc = 125)
		:state(s), volume(5), maxchannel(mc), channel(2), mode(Cable), input(TV);
	void onoff() { state = (state == On) ? Off : On; };
	bool ison()	const { return state == On; };
	bool volup();
	bool voldown();
	void chanup();
	void chandown();
	void set_mode() { mode = (mode == Antenna) ? Cable : Antenna; };
	void set_input() { input = (input == TV) ? DVD : TV; };
	void settings() const;
private:
	int state;
	int volume;
	int maxchannel;
	int channel;
	int mode;
	int input;
};
//Remote methods as inline functions
//其他Remote的方法都作为内联函数
inline bool Remote::volup(Tv &t) { return t.volup(); }
inline bool Remote::
inline bool Remote::
inline bool Remote::
inline bool Remote::
#endif // !TVEM_H_
